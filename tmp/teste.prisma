// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//**Models de Usuário e Autenticação**
model Usuario {
  id                   String            @id @default(uuid())
  nome                 String
  email                String            @unique
  avatar               String?
  funcao               FuncaoUsuario     @default(Analista)
  senha_hash           String
  criado_em            DateTime          @default(now())
  token_atualizacao    TokenAtualizacao?
  relatoriosCriados    Relatorio[]       @relation("CriadorRelatorio")
  relatoriosPermitidos Relatorio[]       @relation("UsuariosPermitidosParaRelatorio")

  @@map("usuarios")
}

model TokenAtualizacao {
  id         String   @id @default(uuid())
  expira_em  Int
  usuario_id String   @unique
  usuario    Usuario  @relation(fields: [usuario_id], references: [id])
  criado_em  DateTime @default(now())

  @@map("tokens_atualizacao")
}

enum FuncaoUsuario {
  Admin
  Analista
  Supervisor
  Revisor
}

//**Models de Relatório**
model Relatorio {
  id                    String          @id @default(uuid())
  numero_processo       String          @unique
  cliente               String
  cnpj                  String
  data_entrada          DateTime        @default(now())
  data_emissao          DateTime?
  status                StatusRelatorio @default(Formalizando)
  usuarioResponsavel    Usuario         @relation("CriadorRelatorio", fields: [usuarioResponsavel_id], references: [id])
  usuarioResponsavel_id String
  usuariosPermitidos    Usuario[]       @relation("UsuariosPermitidosParaRelatorio")

  formaulariosDoRelatorio FormulariosDoRelatorio[]

  @@map("relatorios")
}

enum StatusRelatorio {
  Formalizando
  Finalizado
  Aprovado
  Rejeitado
}

//**Models de Etapa**
enum TipoFormulario {
  stepClienteSegurado
  stepDeclaracaoMotoristaAjudante
}

enum StatusFormulario {
  Pendente
  Formalizando
  Finalizado
}

model FormulariosDoRelatorio {
  id               String           @id @default(uuid())
  tipoFormulario   TipoFormulario
  statusFormulario StatusFormulario

  numeroProcesso String? @unique

  formClienteSegurado    FormClienteSegurado? @relation(fields: [formClienteSegurado_id], references: [id])
  formClienteSegurado_id String?              @unique

  formDeclaracaoMotoristaAjudante    FormDeclaracaoMotoristaAjudante? @relation(fields: [formDeclaracaoMotoristaAjudante_id], references: [id])
  formDeclaracaoMotoristaAjudante_id String?                          @unique

  relatorio_id String
  relatorio    Relatorio @relation(fields: [relatorio_id], references: [id])

  @@map("formularios_do_relatorio")
}

model FormClienteSegurado {
  id                      String                  @id @default(uuid())
  numero_etapa            String                  @default("1")
  status                  StatusFormulario[]
  nomeCliente             String?
  cnpj                    String?
  numero_processo         String?                 @unique
  FormaulariosDoRelatorio FormulariosDoRelatorio?

  @@map("form_clientes_segurados")
}

model FormDeclaracaoMotoristaAjudante {
  id                      String                  @id @default(uuid())
  numero_etapa            String                  @default("11")
  status                  StatusFormulario[]
  arquivos_declaracoes    Arquivo[]
  numero_processo         String?                 @unique
  FormaulariosDoRelatorio FormulariosDoRelatorio?

  @@map("form_declaracoes_motorista_ajudante")
}

//**Model de Arquivo**
model Arquivo {
  id              String  @id @default(uuid())
  nome            String?
  tamanho         Int?
  chave           String
  localizacao     String
  numero_processo String? @unique

  formDeclaracaoMotoristaAjudante    FormDeclaracaoMotoristaAjudante? @relation(fields: [formDeclaracaoMotoristaAjudante_id], references: [id])
  formDeclaracaoMotoristaAjudante_id String?

  @@map("arquivos")
}
